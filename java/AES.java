package CipherSolver.AES;

public class AES {
    public static final int WORD_SIZE = 4; //Bytes
    private static final int[] ROUND_CONSTANTS = { 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36 };
    private static final int BLOCK_SIZE = 4; //Words
    private static final int BLOCK_SIZE_BYTES = BLOCK_SIZE * WORD_SIZE; //Bytes

    private final int KEY_SIZE; //In words
    private final int ROUNDS; //KEY_SIZE + 6


    public AES(KeySize keySize){
        KEY_SIZE = keySize.getWords();
        ROUNDS = KEY_SIZE + 6;
    }

    public String encrypt(String inChars, AESKey AESKey){
        byte[] inputData = getBytesFromString(inChars);
        return getHexStringFromBytes(encrypt(inputData, AESKey));
    }
    public byte[] encrypt(byte[] in, AESKey AESKey){
        if (AESKey.keySize.getWords() != KEY_SIZE)
            throw new IllegalArgumentException("The key argument is incompatible with the selected key size.");
        Word[] roundKeys = expandKey(AESKey.data);
        int numberOfBlocks = (int)Math.ceil((double)in.length / BLOCK_SIZE_BYTES);
        byte[] out = new byte[numberOfBlocks * BLOCK_SIZE_BYTES];
        for (int block = 0; block < numberOfBlocks; block++){
            byte[] tempBlock = new byte[BLOCK_SIZE_BYTES];
            int index = 0; int i = 0;
            final int remainder = block == numberOfBlocks - 1 ? in.length : block * BLOCK_SIZE_BYTES + BLOCK_SIZE_BYTES;
            for (i = block * BLOCK_SIZE_BYTES; i < remainder; i++)
                tempBlock[index++] = in[i];
            tempBlock = encryptBlock(tempBlock, roundKeys);
            index = 0;
            for (i = block * BLOCK_SIZE_BYTES; i < block * BLOCK_SIZE_BYTES + BLOCK_SIZE_BYTES; i++)
                out[i] = tempBlock[index++];
        }
        return out;
    }
    public String decrypt(String inHex, AESKey AESKey){
        byte[] data = getBytesFromHex(inHex);
        return getCharStringFromBytes(decrypt(data, AESKey));
    }
    public byte[] decrypt(byte[] in, AESKey AESKey){
        if (AESKey.keySize.getWords() != KEY_SIZE)
            throw new IllegalArgumentException("The key argument is incompatible with the selected key size.");
        if (in.length % BLOCK_SIZE_BYTES != 0)
            throw new IllegalArgumentException("The input data must be a multiple of " + BLOCK_SIZE_BYTES + ".");
        Word[] roundKeys = expandKey(AESKey.data);
        int numberOfBlocks = (int)Math.ceil((double)in.length / BLOCK_SIZE_BYTES);
        byte[] out = new byte[numberOfBlocks * BLOCK_SIZE_BYTES];
        for (int block = 0; block < numberOfBlocks; block++){
            byte[] tempBlock = new byte[BLOCK_SIZE_BYTES];
            int index = 0; int i;
            for (i = block * BLOCK_SIZE_BYTES; i < (block + 1) * BLOCK_SIZE_BYTES ; i++)
                tempBlock[index++] = in[i];
            tempBlock = decryptBlock(tempBlock, roundKeys);
            index = 0;
            for (i = block * BLOCK_SIZE_BYTES; i < (block + 1) * BLOCK_SIZE_BYTES ; i++)
                out[i] = tempBlock[index++];
        }
        return out;
    }

    public byte[] getBytesFromString(String bytesAsString){
        byte[] block = new byte[bytesAsString.length()];
        for (int i = 0; i < bytesAsString.length(); i++)
            block[i] = (byte) (bytesAsString.charAt(i));
        return block;
    }
    public byte[] getBytesFromHex(String bytesAsHex){
        bytesAsHex = bytesAsHex.replace(" ", "").replace("\n","");
        if (bytesAsHex.length() % (BLOCK_SIZE_BYTES * 2) != 0)
            throw new IllegalArgumentException("The hex string must be a multiple of 32.");
        byte[] data = new byte[bytesAsHex.length()/2];
        for (int i = 0; i < bytesAsHex.length()/2; i++)
            data[i] = (byte) (16 * AES.hexToDecimal(bytesAsHex.charAt(i * 2)) + AES.hexToDecimal(bytesAsHex.charAt(i * 2 + 1)));
        return data;
    }
    public String getCharStringFromBytes(byte[] data){
        StringBuilder stringBuilder = new StringBuilder();
        for (byte aByte : data)
            stringBuilder.append((char) aByte);
        return stringBuilder.toString();
    }
    public String getHexStringFromBytes(byte[] data){
        if (data.length % BLOCK_SIZE_BYTES != 0)
            throw new IllegalArgumentException("The data must be a multiple of the state block size.");
        StringBuilder stringBuilder = new StringBuilder();
        int numberOfBlocks = data.length / BLOCK_SIZE_BYTES;
        for (int block = 0; block < numberOfBlocks; block++) {
            for (int i = 0; i < BLOCK_SIZE_BYTES; i++)
                stringBuilder.append(decimalToHex(data[BLOCK_SIZE_BYTES * block + i]));
            stringBuilder.append(' ');
        }
        return stringBuilder.toString();
    }

    //formatting utils
    public static int hexToDecimal(char hex){
        hex = Character.toUpperCase(hex);
        if (hex >= 48 && hex <= 57) //0-9
            return hex - 48;
        else if (hex >= 65 && hex <= 70) //A-F
            return hex - 55;
        else
            throw new IllegalArgumentException("Invalid Hexadecimal Number");
    }
    public static String decimalToHex(byte b){
        int decimal = getRealValue(b);
        int mod = decimal % 16;
        return String.valueOf(getHex((decimal - mod) / 16)) + getHex(mod);
    }
    public static char getHex(int decimal){
        return (char) (decimal < 10 ? decimal + 48 : decimal + 87);
    }
    public static int gcd(int a, int b){
        if (b == 0)
            return a;
        return gcd(b, a % b);
    }
    public static int getRealValue(byte b){
        return b & 0xFF;
    }

    // encryption / decryption
    byte[] encryptBlock(byte[] in, Word[] key){
        byte[] out = new byte[BLOCK_SIZE * WORD_SIZE];
        byte[][] state = new byte[4][4];
        assignByteArray(in, state);

        addRoundKey(state, 0, key);

        for (int round = 1; round < ROUNDS; round++) {
            subBytes(state, false);
            shiftRows(state, false);
            mixColumns(state, false);
            addRoundKey(state, round, key); //takes range of 4 words
        }

        subBytes(state, false);
        shiftRows(state, false);
        addRoundKey(state, ROUNDS, key);

        assignByteArray(state, out);
        return out;
    }
    byte[] decryptBlock(byte[] in, Word[] key){
        byte[] out = new byte[BLOCK_SIZE * WORD_SIZE];
        byte[][] state = new byte[4][4];
        assignByteArray(in, state);

        addRoundKey(state, ROUNDS, key);

        for (int round = ROUNDS - 1; round > 0; round--) {
            shiftRows(state, true);
            subBytes(state, true);
            addRoundKey(state, round, key); //takes range of 4 words
            mixColumns(state, true);
        }

        shiftRows(state, true);
        subBytes(state, true);
        addRoundKey(state, 0, key);

        assignByteArray(state, out);
        return out;
    }
    void addRoundKey(byte[][] state, int round, Word[] key){
        for (int row = 0; row < 4; row++)
            for (int col = 0; col < 4; col++)
                state[row][col] = (byte) (getRealValue(state[row][col]) ^ getRealValue(key[4 * round + col].bytes[row]));
    }
    void mixColumns(byte[][] state, boolean reverse){
        int[][] standardMatrix = {
                { 0x02, 0x03, 0x01, 0x01 },
                { 0x01, 0x02, 0x03, 0x01 },
                { 0x01, 0x01, 0x02, 0x03 },
                { 0x03, 0x01, 0x01, 0x02 }
        };
        int[][] reverseMatrix = {
                { 0x0e, 0x0b, 0x0d, 0x09 },
                { 0x09, 0x0e, 0x0b, 0x0d },
                { 0x0d, 0x09, 0x0e, 0x0b },
                { 0x0b, 0x0d, 0x09, 0x0e }
        };
        int[][] matrix = reverse ? reverseMatrix : standardMatrix;
        byte[] tempCol = new byte[4];
        for (int col = 0; col < 4; col++) {
            for (int row = 0; row < 4; row++)
                tempCol[row] = (byte)(FFM((byte)matrix[row][0], state[0][col])  ^ FFM((byte)matrix[row][1], state[1][col])  ^
                        FFM((byte)matrix[row][2], state[2][col])  ^ FFM((byte)matrix[row][3], state[3][col]));
            for (int row = 0; row < 4; row++)
                state[row][col] = tempCol[row];
        }
    }
    void shiftRows(byte[][] state, boolean reverse){
        for (int row = 0; row < 4; row++) {
            int shift = reverse ? 4 - row : row;
            for (int i = 0; i < gcd(shift, 4); i++) {
                byte temp = state[row][i];
                int j = i;
                while (true) {
                    int k = (j + shift) % 4;
                    if (k == i) break;
                    state[row][j] = state[row][k];
                    j = k;
                }
                state[row][j] = temp;
            }
        }
    }
    void subBytes(byte[][] state, boolean reverse){
        for (int col = 0; col < 4; col++)
            for (int row = 0; row < 4; row++)
                state[row][col] = doSBox(state[row][col], reverse);
    }

    //utils for encryption / decryption
    void assignByteArray(byte[][] in, byte[] out){
        for (int col = 0; col < 4; col++)
            for (int row = 0; row < 4; row++)
                out[col * 4 + row] = in[row][col];
    }
    void assignByteArray(byte[] in, byte[][] out){
        for (int col = 0; col < 4; col++)
            for (int row = 0; row < 4; row++)
                out[row][col] = in[col * 4 + row];
    }
    public int FFM(byte b0, byte b1) {
        int[] tableOfExponents = {
                0x01, 0x03, 0x05, 0x0f, 0x11, 0x33, 0x55, 0xff, 0x1a, 0x2e, 0x72, 0x96, 0xa1, 0xf8, 0x13, 0x35,
                0x5f, 0xe1, 0x38, 0x48, 0xd8, 0x73, 0x95, 0xa4, 0xf7, 0x02, 0x06, 0x0a, 0x1e, 0x22, 0x66, 0xaa,
                0xe5, 0x34, 0x5c, 0xe4, 0x37, 0x59, 0xeb, 0x26, 0x6a, 0xbe, 0xd9, 0x70, 0x90, 0xab, 0xe6, 0x31,
                0x53, 0xf5, 0x04, 0x0c, 0x14, 0x3c, 0x44, 0xcc, 0x4f, 0xd1, 0x68, 0xb8, 0xd3, 0x6e, 0xb2, 0xcd,
                0x4c, 0xd4, 0x67, 0xa9, 0xe0, 0x3b, 0x4d, 0xd7, 0x62, 0xa6, 0xf1, 0x08, 0x18, 0x28, 0x78, 0x88,
                0x83, 0x9e, 0xb9, 0xd0, 0x6b, 0xbd, 0xdc, 0x7f, 0x81, 0x98, 0xb3, 0xce, 0x49, 0xdb, 0x76, 0x9a,
                0xb5, 0xc4, 0x57, 0xf9, 0x10, 0x30, 0x50, 0xf0, 0x0b, 0x1d, 0x27, 0x69, 0xbb, 0xd6, 0x61, 0xa3,
                0xfe, 0x19, 0x2b, 0x7d, 0x87, 0x92, 0xad, 0xec, 0x2f, 0x71, 0x93, 0xae, 0xe9, 0x20, 0x60, 0xa0,
                0xfb, 0x16, 0x3a, 0x4e, 0xd2, 0x6d, 0xb7, 0xc2, 0x5d, 0xe7, 0x32, 0x56, 0xfa, 0x15, 0x3f, 0x41,
                0xc3, 0x5e, 0xe2, 0x3d, 0x47, 0xc9, 0x40, 0xc0, 0x5b, 0xed, 0x2c, 0x74, 0x9c, 0xbf, 0xda, 0x75,
                0x9f, 0xba, 0xd5, 0x64, 0xac, 0xef, 0x2a, 0x7e, 0x82, 0x9d, 0xbc, 0xdf, 0x7a, 0x8e, 0x89, 0x80,
                0x9b, 0xb6, 0xc1, 0x58, 0xe8, 0x23, 0x65, 0xaf, 0xea, 0x25, 0x6f, 0xb1, 0xc8, 0x43, 0xc5, 0x54,
                0xfc, 0x1f, 0x21, 0x63, 0xa5, 0xf4, 0x07, 0x09, 0x1b, 0x2d, 0x77, 0x99, 0xb0, 0xcb, 0x46, 0xca,
                0x45, 0xcf, 0x4a, 0xde, 0x79, 0x8b, 0x86, 0x91, 0xa8, 0xe3, 0x3e, 0x42, 0xc6, 0x51, 0xf3, 0x0e,
                0x12, 0x36, 0x5a, 0xee, 0x29, 0x7b, 0x8d, 0x8c, 0x8f, 0x8a, 0x85, 0x94, 0xa7, 0xf2, 0x0d, 0x17,
                0x39, 0x4b, 0xdd, 0x7c, 0x84, 0x97, 0xa2, 0xfd, 0x1c, 0x24, 0x6c, 0xb4, 0xc7, 0x52, 0xf6, 0x01
        };
        int[] tableOfLogarithms = {
                0x00, 0x00, 0x19, 0x01, 0x32, 0x02, 0x1a, 0xc6, 0x4b, 0xc7, 0x1b, 0x68, 0x33, 0xee, 0xdf, 0x03,
                0x64, 0x04, 0xe0, 0x0e, 0x34, 0x8d, 0x81, 0xef, 0x4c, 0x71, 0x08, 0xc8, 0xf8, 0x69, 0x1c, 0xc1,
                0x7d, 0xc2, 0x1d, 0xb5, 0xf9, 0xb9, 0x27, 0x6a, 0x4d, 0xe4, 0xa6, 0x72, 0x9a, 0xc9, 0x09, 0x78,
                0x65, 0x2f, 0x8a, 0x05, 0x21, 0x0f, 0xe1, 0x24, 0x12, 0xf0, 0x82, 0x45, 0x35, 0x93, 0xda, 0x8e,
                0x96, 0x8f, 0xdb, 0xbd, 0x36, 0xd0, 0xce, 0x94, 0x13, 0x5c, 0xd2, 0xf1, 0x40, 0x46, 0x83, 0x38,
                0x66, 0xdd, 0xfd, 0x30, 0xbf, 0x06, 0x8b, 0x62, 0xb3, 0x25, 0xe2, 0x98, 0x22, 0x88, 0x91, 0x10,
                0x7e, 0x6e, 0x48, 0xc3, 0xa3, 0xb6, 0x1e, 0x42, 0x3a, 0x6b, 0x28, 0x54, 0xfa, 0x85, 0x3d, 0xba,
                0x2b, 0x79, 0x0a, 0x15, 0x9b, 0x9f, 0x5e, 0xca, 0x4e, 0xd4, 0xac, 0xe5, 0xf3, 0x73, 0xa7, 0x57,
                0xaf, 0x58, 0xa8, 0x50, 0xf4, 0xea, 0xd6, 0x74, 0x4f, 0xae, 0xe9, 0xd5, 0xe7, 0xe6, 0xad, 0xe8,
                0x2c, 0xd7, 0x75, 0x7a, 0xeb, 0x16, 0x0b, 0xf5, 0x59, 0xcb, 0x5f, 0xb0, 0x9c, 0xa9, 0x51, 0xa0,
                0x7f, 0x0c, 0xf6, 0x6f, 0x17, 0xc4, 0x49, 0xec, 0xd8, 0x43, 0x1f, 0x2d, 0xa4, 0x76, 0x7b, 0xb7,
                0xcc, 0xbb, 0x3e, 0x5a, 0xfb, 0x60, 0xb1, 0x86, 0x3b, 0x52, 0xa1, 0x6c, 0xaa, 0x55, 0x29, 0x9d,
                0x97, 0xb2, 0x87, 0x90, 0x61, 0xbe, 0xdc, 0xfc, 0xbc, 0x95, 0xcf, 0xcd, 0x37, 0x3f, 0x5b, 0xd1,
                0x53, 0x39, 0x84, 0x3c, 0x41, 0xa2, 0x6d, 0x47, 0x14, 0x2a, 0x9e, 0x5d, 0x56, 0xf2, 0xd3, 0xab,
                0x44, 0x11, 0x92, 0xd9, 0x23, 0x20, 0x2e, 0x89, 0xb4, 0x7c, 0xb8, 0x26, 0x77, 0x99, 0xe3, 0xa5,
                0x67, 0x4a, 0xed, 0xde, 0xc5, 0x31, 0xfe, 0x18, 0x0d, 0x63, 0x8c, 0x80, 0xc0, 0xf7, 0x70, 0x07
        };
        int a = getRealValue(b0);
        int b = getRealValue(b1);
        if (a == 0 || b == 0)
            return 0;
        int t = tableOfLogarithms[a] + tableOfLogarithms[b];
        if (t > 255) t -= 255;
        return tableOfExponents[t];
    }
    byte doSBox(byte b, boolean reverse){
        int[][] sBox = {
                {0x63,0x7c,0x77,0x7b,0xf2,0x6b,0x6f,0xc5,0x30,0x01,0x67,0x2b,0xfe,0xd7,0xab,0x76},
                {0xca,0x82,0xc9,0x7d,0xfa,0x59,0x47,0xf0,0xad,0xd4,0xa2,0xaf,0x9c,0xa4,0x72,0xc0},
                {0xb7,0xfd,0x93,0x26,0x36,0x3f,0xf7,0xcc,0x34,0xa5,0xe5,0xf1,0x71,0xd8,0x31,0x15},
                {0x04,0xc7,0x23,0xc3,0x18,0x96,0x05,0x9a,0x07,0x12,0x80,0xe2,0xeb,0x27,0xb2,0x75},
                {0x09,0x83,0x2c,0x1a,0x1b,0x6e,0x5a,0xa0,0x52,0x3b,0xd6,0xb3,0x29,0xe3,0x2f,0x84},
                {0x53,0xd1,0x00,0xed,0x20,0xfc,0xb1,0x5b,0x6a,0xcb,0xbe,0x39,0x4a,0x4c,0x58,0xcf},
                {0xd0,0xef,0xaa,0xfb,0x43,0x4d,0x33,0x85,0x45,0xf9,0x02,0x7f,0x50,0x3c,0x9f,0xa8},
                {0x51,0xa3,0x40,0x8f,0x92,0x9d,0x38,0xf5,0xbc,0xb6,0xda,0x21,0x10,0xff,0xf3,0xd2},
                {0xcd,0x0c,0x13,0xec,0x5f,0x97,0x44,0x17,0xc4,0xa7,0x7e,0x3d,0x64,0x5d,0x19,0x73},
                {0x60,0x81,0x4f,0xdc,0x22,0x2a,0x90,0x88,0x46,0xee,0xb8,0x14,0xde,0x5e,0x0b,0xdb},
                {0xe0,0x32,0x3a,0x0a,0x49,0x06,0x24,0x5c,0xc2,0xd3,0xac,0x62,0x91,0x95,0xe4,0x79},
                {0xe7,0xc8,0x37,0x6d,0x8d,0xd5,0x4e,0xa9,0x6c,0x56,0xf4,0xea,0x65,0x7a,0xae,0x08},
                {0xba,0x78,0x25,0x2e,0x1c,0xa6,0xb4,0xc6,0xe8,0xdd,0x74,0x1f,0x4b,0xbd,0x8b,0x8a},
                {0x70,0x3e,0xb5,0x66,0x48,0x03,0xf6,0x0e,0x61,0x35,0x57,0xb9,0x86,0xc1,0x1d,0x9e},
                {0xe1,0xf8,0x98,0x11,0x69,0xd9,0x8e,0x94,0x9b,0x1e,0x87,0xe9,0xce,0x55,0x28,0xdf},
                {0x8c,0xa1,0x89,0x0d,0xbf,0xe6,0x42,0x68,0x41,0x99,0x2d,0x0f,0xb0,0x54,0xbb,0x16} };
        int[][] invSBox = {
                {0x52,0x09,0x6a,0xd5,0x30,0x36,0xa5,0x38,0xbf,0x40,0xa3,0x9e,0x81,0xf3,0xd7,0xfb},
                {0x7c,0xe3,0x39,0x82,0x9b,0x2f,0xff,0x87,0x34,0x8e,0x43,0x44,0xc4,0xde,0xe9,0xcb},
                {0x54,0x7b,0x94,0x32,0xa6,0xc2,0x23,0x3d,0xee,0x4c,0x95,0x0b,0x42,0xfa,0xc3,0x4e},
                {0x08,0x2e,0xa1,0x66,0x28,0xd9,0x24,0xb2,0x76,0x5b,0xa2,0x49,0x6d,0x8b,0xd1,0x25},
                {0x72,0xf8,0xf6,0x64,0x86,0x68,0x98,0x16,0xd4,0xa4,0x5c,0xcc,0x5d,0x65,0xb6,0x92},
                {0x6c,0x70,0x48,0x50,0xfd,0xed,0xb9,0xda,0x5e,0x15,0x46,0x57,0xa7,0x8d,0x9d,0x84},
                {0x90,0xd8,0xab,0x00,0x8c,0xbc,0xd3,0x0a,0xf7,0xe4,0x58,0x05,0xb8,0xb3,0x45,0x06},
                {0xd0,0x2c,0x1e,0x8f,0xca,0x3f,0x0f,0x02,0xc1,0xaf,0xbd,0x03,0x01,0x13,0x8a,0x6b},
                {0x3a,0x91,0x11,0x41,0x4f,0x67,0xdc,0xea,0x97,0xf2,0xcf,0xce,0xf0,0xb4,0xe6,0x73},
                {0x96,0xac,0x74,0x22,0xe7,0xad,0x35,0x85,0xe2,0xf9,0x37,0xe8,0x1c,0x75,0xdf,0x6e},
                {0x47,0xf1,0x1a,0x71,0x1d,0x29,0xc5,0x89,0x6f,0xb7,0x62,0x0e,0xaa,0x18,0xbe,0x1b},
                {0xfc,0x56,0x3e,0x4b,0xc6,0xd2,0x79,0x20,0x9a,0xdb,0xc0,0xfe,0x78,0xcd,0x5a,0xf4},
                {0x1f,0xdd,0xa8,0x33,0x88,0x07,0xc7,0x31,0xb1,0x12,0x10,0x59,0x27,0x80,0xec,0x5f},
                {0x60,0x51,0x7f,0xa9,0x19,0xb5,0x4a,0x0d,0x2d,0xe5,0x7a,0x9f,0x93,0xc9,0x9c,0xef},
                {0xa0,0xe0,0x3b,0x4d,0xae,0x2a,0xf5,0xb0,0xc8,0xeb,0xbb,0x3c,0x83,0x53,0x99,0x61},
                {0x17,0x2b,0x04,0x7e,0xba,0x77,0xd6,0x26,0xe1,0x69,0x14,0x63,0x55,0x21,0x0c,0x7d} };
        int y = getRealValue(b) % 16;
        int x = (int)(getRealValue(b) - y) / 16;
        return reverse ? (byte)invSBox[x][y] : (byte)sBox[x][y];
    }

    //key expansion
    Word[] expandKey(byte[] key){
        Word[] w = new Word[BLOCK_SIZE * (ROUNDS + 1)];
        Word temp;
        int i = 0;

        while (i < KEY_SIZE) {
            w[i] = new Word(key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]);
            i++;
        }

        i = KEY_SIZE;

        while (i < BLOCK_SIZE * (ROUNDS + 1)) {
            temp = w[i - 1].copy();
            if (i % KEY_SIZE == 0){
                Word rCon = new Word((byte) ROUND_CONSTANTS[(i / KEY_SIZE) - 1], (byte)0x00, (byte)0x00, (byte)0x00);
                temp = subWord(rotWord(temp)).xorWith(rCon);
            }
            else if (KEY_SIZE > 6 && i % KEY_SIZE == 4)
                temp = subWord(temp.copy());
            w[i] = w[i - KEY_SIZE].xorWith(temp);
            i++;
        }
        return w;
    }
    Word subWord(Word w){
        Word temp = new Word();
        temp.setBytes(
            doSBox(w.bytes[0], false),
            doSBox(w.bytes[1], false),
            doSBox(w.bytes[2], false),
            doSBox(w.bytes[3], false)
        );
        return temp;
    }
    Word rotWord(Word w){
        Word tempWord = new Word();
        for (int i = 0; i < 4; i++)
            tempWord.bytes[i] = w.bytes[(i + 1) % 4];
        return tempWord;
    }
}